#!/bin/bash
###############################################################################
# This script is to tune the ACOTSP software.
#
# PARAMETERS:
# $1 is the ID of the candidate to be evaluated
# $2 is the instance ID
# $3 is the seed
# $4 is the instance name
# The rest ($* after `shift 4') are parameters for running AntKnapsack
#
# RETURN VALUE:
# This script should print a single numerical value (the value to be minimized).
###############################################################################
error() {
    echo "`TZ=UTC date`: $0: error: $@" >&2
    exit 1
}


# Fixed parameters that should be always passed to ACOTSP.
# The time to be used is always 10 seconds, and we want only one run:
FIXED_PARAMS=" --tries 1 --time 10 --quiet "

CONFIG_ID="$1"
INSTANCE_ID="$2"
SEED="$3"
INSTANCE="$4"

# default values to fill
mf1=0.025
mf2=0.025
cf=0.9
se=0.5
mbk1=0.025
mbk2=0.025
cbk=0.9

gen=100
pops=20
count=0
# Problem settings
nv=6
nk=1
nl=1
lc=1
nlo=1
# All other parameters are the candidate parameters to be passed to program
shift 4 || error "Not enough parameters"

while [ $# != 0 ]; do
    flag="$1"
    case "$flag" in
    	-gen) if [ $# -gt 1 ]; then
              arg="$2"
              shift
              gen=$arg
            fi
            ;;
    	-pops) if [ $# -gt 1 ]; then
              arg="$2"
              shift
              pops=$arg
            fi
            ;;
        -mf1) if [ $# -gt 1 ]; then
              arg="$2"
              shift
              mf1=$arg
            fi
            ;;
        -mf2) if [ $# -gt 1 ]; then
              arg="$2"
              shift
              mf2=$arg
            fi
            ;;
        -cf) if [ $# -gt 1 ]; then
              arg="$2"
              shift
              cf=$arg
            fi
            ;;
        -se) if [ $# -gt 1 ]; then
              arg="$2"
              shift
              se=$arg
            fi
            ;;
        -mbk1) if [ $# -gt 1 ]; then
              arg="$2"
              shift
              mbk1=$arg
            fi
            ;;
         -mbk2) if [ $# -gt 1 ]; then
              arg="$2"
              shift
              mbk2=$arg
            fi
            ;;
         -cbk) if [ $# -gt 1 ]; then
              arg="$2"
              shift
              cbk=$arg
            fi
            ;;
          -nv) if [ $# -gt 1 ]; then
              arg="$2"
              shift
              nv=$arg
            fi
            ;;
           -nk) if [ $# -gt 1 ]; then
              arg="$2"
              shift
              nk=$arg
            fi
            ;;
           -nl) if [ $# -gt 1 ]; then
              arg="$2"
              shift
              nl=$arg
            fi
            ;;
           -lc) if [ $# -gt 1 ]; then
              arg="$2"
              shift
              lc=$arg
            fi
            ;;
          -nlo) if [ $# -gt 1 ]; then
              arg="$2"
              shift
              nlo=$arg
            fi
            ;;
        *) #echo "Unrecognized flag or argument: $flag at $count"
            ;;
        esac
    shift
    ((count++))
done


STDOUT=c${CONFIG_ID}-${INSTANCE_ID}-${SEED}.stdout
STDERR=c${CONFIG_ID}-${INSTANCE_ID}-${SEED}.stderr

# execute the thing ! and pass the results to this thing !!! a numbre -inf to inf, tying to optimice this number (most negative)
# the instance contains tehe current "dimention" ${INSTANCE}
# python2 SPOEA.py 200 0 2-10 0 10 1 20 0.1 0.9 0.9 0.1 SPO 1> $STDOUT 2> $STDERR
# python2 /home/felipe/Desktop/SPO_SINT/iraceATK/SPO/SPOModified/SPOEA.py 200 0 2-10 0 10 1 20 SPO ${SEED} $dim $hc1 $hc2 $inq $deq $pgv 1> $STDOUT 2> $STDERR

#echo "" 
#echo /home/felipe/Desktop/PDGwB-LP-C++/pdgwb ${SEED} $nv $nk $nl $lc $nlo false no $gen $pops $mf1 $mf2 $cf $se $mbk1 $mbk2 $cbk false
#echo "" 

/home/felipe/Desktop/PDGwB-LP-C++/pdgwb ${SEED} $nv $nk $nl $lc $nlo false no $gen $pops $mf1 $mf2 $cf $se $mbk1 $mbk2 $cbk false 1> $STDOUT 2> $STDERR
#    							   Seed nV nK nL Lcoef neededL Testing FileName Gen PopSize Sym ProbSettings  DisplayDungeon("false")
 

# The output of the candidate $CONFIG_ID should be written in the file 
# Does this file exist?
if [ ! -s "${STDOUT}" ]; then
    # In this case, the file does not exist. Let's exit with a value 
    # different from 0. In this case irace will stop with an error.
    error "${STDOUT}: No such file or directory"
fi

# Ok, the file exist. It contains the whole output written by ANTKnap.
COST=$(cat ${STDOUT})
if ! [[ "$COST" =~ ^[-+0-9.e]+$ ]] ; then
    error "${STDOUT}: Output is not a number"
fi

# Print it!
echo "$COST"

# We are done with our duty. Clean files and exit with 0 (no error).
rm -f "${STDOUT}" "${STDERR}"
rm -f best.* stat.* cmp.*
exit 0
